voteview.search <- function(query,startdate=NULL,enddate=NULL,chamber=NULL) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/search?q=%s",
URLencode(query))
if (!(is.null(startdate))) {
theurl <- sprintf("%s&startdate=%s",theurl,startdate)
}
if (!(is.null(enddate))) {
theurl <- sprintf("%s&enddate=%s",theurl,enddate)
}
if (!(is.null(chamber))) {
theurl <- sprintf("%s&chamber=%s",theurl,chamber)
}
conn <- url(theurl)
suppressWarnings(resjson <- fromJSON(readLines(conn)))
cat(sprintf("Query '%s' returned %i votes...\n",query,resjson$recordcount))
close(conn)
return( vlist2df(resjson$rollcalls) )
}
# Function to down load voteview rollcall data in JSON format
voteview.download <- function(ids) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/download?ids=%s&xls=F",
paste(ids,collapse=","))
conn <- url(theurl)
suppressWarnings(resjson <- readLines(conn))
close(conn)
return(resjson)
}
# Test function
test <- function() {
res <- voteview.search("abortion")
json <- voteview.download(res$id)
#  return( read.voteview.json(json) )
return( voteview2rollcall(json) )
}
test()
f <- test()
summary(f)
library(rjson)
library(pscl)
# Trim white space off of strings
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# Take the JSON from voteview an roll a rollcall vote data frame and
# rollcall description data frame
read.voteview.json <- function(json) {
suppressWarnings(data <- fromJSON(json)) # readLines gives missing end of line warning
data$votematrix <- as.data.frame(data$votematrix,stringsAsFactors=F)[,data$vmNames]
data$rollcalls <- as.data.frame(data$rollcalls,stringsAsFactors=F)[,data$rcNames]
data$vmNames <- NULL
data$rcNames <- NULL
return( data )
}
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
print( data )
dat  <- data$votematrix[,grep("^V\\d+",names(data$votematrix))]
rnames <- sprintf("%s %s - %s",trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
rownames(dat) <- rnames
legis.data <- data$votematrix[,-grep("^V\\d+",names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data=dat,
yea=c(1,2,3),
nay=c(4,5,6),
missing=c(NA,7,8,9),
notInLegis=0,
legis.data=legis.data,
vote.data=data$rollcalls,
source="Download from VoteView")
return(rc)
}
# Helper function that takes a vector of lists into a dataframe
vlist2df <- function(rcs) {
df <- list()
flds <- names(rcs[[1]])
for (f in flds) {
md <- ifelse(class(rcs[[1]][[f]])=="character","character","integer")
df[[f]] <- vector(mode=md,length=length(rcs))
}
for (i in 1:length(rcs)) {
for (f in flds) {
if (!is.null(rcs[[i]][[f]])) {
df[[f]][i] <- rcs[[i]][[f]]
}
}
}
return( as.data.frame(df,stringsAsFactors=FALSE) )
}
# Function to run a voteview query
voteview.search <- function(query,startdate=NULL,enddate=NULL,chamber=NULL) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/search?q=%s",
URLencode(query))
if (!(is.null(startdate))) {
theurl <- sprintf("%s&startdate=%s",theurl,startdate)
}
if (!(is.null(enddate))) {
theurl <- sprintf("%s&enddate=%s",theurl,enddate)
}
if (!(is.null(chamber))) {
theurl <- sprintf("%s&chamber=%s",theurl,chamber)
}
conn <- url(theurl)
suppressWarnings(resjson <- fromJSON(readLines(conn)))
cat(sprintf("Query '%s' returned %i votes...\n",query,resjson$recordcount))
close(conn)
return( vlist2df(resjson$rollcalls) )
}
# Function to down load voteview rollcall data in JSON format
voteview.download <- function(ids) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/download?ids=%s&xls=F",
paste(ids,collapse=","))
conn <- url(theurl)
suppressWarnings(resjson <- readLines(conn))
close(conn)
return(resjson)
}
# Test function
test <- function() {
res <- voteview.search("Iraq")
json <- voteview.download(res$id)
#  return( read.voteview.json(json) )
return( voteview2rollcall(json) )
}
x <- c(1,3,2,0)
y <- c(1,3,3,1)
cor(x,y)
y <- c(1,1,3,1)
cor(x,y)
plot(x,y)
library(ggplot2)
qplot(x,y)
qplot(x,y) + theme_bw()
x <- c(1,3,2,4)
y <- c(1,1,3,3)
qplot(x,y) + theme_bw()
x <- rnorm(100)
y <- rnorm(100, 2*x)
qplot(x,y)
mean(x)
mean(y)
x <- rnorm(1000)
y <- rnorm(1000, 2*x)
mean(y)
mean(x)
qplot(x,y)
x <- rnorm(100)
y <- rnorm(100, 2*x)
qplot(x,y)
library(rjson)
library(pscl)
# Trim white space off of strings
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# Take the JSON from voteview an roll a rollcall vote data frame and
# rollcall description data frame
read.voteview.json <- function(json) {
suppressWarnings(data <- fromJSON(json)) # readLines gives missing end of line warning
data$votematrix <- as.data.frame(data$votematrix, stringsAsFactors = F)[, data$vmNames]
data$rollcalls <- as.data.frame(data$rollcalls, stringsAsFactors = F)[, data$rcNames]
data$vmNames <- NULL
data$rcNames <- NULL
return( data )
}
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
print( data )
dat  <- data$votematrix[,grep("^V\\d+", names(data$votematrix))]
rnames <- sprintf("%s %s - %s", trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
rownames(dat) <- rnames
legis.data <- data$votematrix[, -grep("^V\\d+", names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data = dat,
yea = c(1, 2, 3),
nay = c(4, 5, 6),
missing = c(NA, 7, 8, 9),
notInLegis = 0,
legis.data = legis.data,
vote.data = data$rollcalls,
source = "Download from VoteView")
return(rc)
}
# Helper function that transforms a vector of lists into a dataframe
vlist2df <- function(rcs) {
df <- list()
flds <- names(rcs[[1]])
for (f in flds) {
md <- ifelse(class(rcs[[1]][[f]]) == "character", "character", "integer")
df[[f]] <- vector(mode = md,length = length(rcs))
}
for (i in 1:length(rcs)) {
for (f in flds) {
# There are some missing fields for votes in the  113 or 114 congresses
if (!is.null(rcs[[i]][[f]])) {
df[[f]][i] <- rcs[[i]][[f]]
}
}
}
return( as.data.frame(df, stringsAsFactors = FALSE) )
}
# Function to run a voteview query, returning a dataframe of matching votes and
# basic data about those votesbarba
voteview.search <- function(query,
startdate = NULL, enddate = NULL, chamber = NULL) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/search?q=%s",
URLencode(query))
if (!(is.null(startdate))) {
theurl <- sprintf("%s&startdate=%s", theurl, startdate)
}
if (!(is.null(enddate))) {
theurl <- sprintf("%s&enddate=%s", theurl, enddate)
}
if (!(is.null(chamber))) {
theurl <- sprintf("%s&chamber=%s", theurl, chamber)
}
conn <- url(theurl)
suppressWarnings(resjson <- fromJSON(readLines(conn)))
cat(sprintf("Query '%s' returned %i votes...\n", query, resjson$recordcount))
close(conn)
return( vlist2df(resjson$rollcalls) )
}
# Function to download voteview rollcall data in JSON format
voteview.download <- function(ids) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/download?ids=%s&xls=F",
paste(ids , collapse = ","))
conn <- url(theurl)
suppressWarnings(resjson <- readLines(conn))
close(conn)
return( resjson )
}
# Test function
test <- function() {
res <- voteview.search("Iraq")
json <- voteview.download(res$id)
#  return( read.voteview.json(json) )
return( voteview2rollcall(json) )
}
tes()
test()
test()
res <- voteview.search("Iraq")
res
json <- voteview.download(res$id)
res <- voteview.search("Iraq", chamber = "Senate")
res
json <- voteview.download(res$id)
json
voteview2rollcall(json)
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
print( data )
dat  <- data$votematrix[,grep("^V\\d+", names(data$votematrix))]
rnames <- sprintf("%s %s - %s", trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
return(rnames)
rownames(dat) <- rnames
legis.data <- data$votematrix[, -grep("^V\\d+", names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data = dat,
yea = c(1, 2, 3),
nay = c(4, 5, 6),
missing = c(NA, 7, 8, 9),
notInLegis = 0,
legis.data = legis.data,
vote.data = data$rollcalls,
source = "Download from VoteView")
return(rc)
}
voteview2rollcall(json)
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
#print( data )
dat  <- data$votematrix[,grep("^V\\d+", names(data$votematrix))]
rnames <- sprintf("%s %s - %s", trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
return(rnames)
rownames(dat) <- rnames
legis.data <- data$votematrix[, -grep("^V\\d+", names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data = dat,
yea = c(1, 2, 3),
nay = c(4, 5, 6),
missing = c(NA, 7, 8, 9),
notInLegis = 0,
legis.data = legis.data,
vote.data = data$rollcalls,
source = "Download from VoteView")
return(rc)
}
voteview2rollcall(json)
length(duplicates( voteview2rollcall(json) ))
length(unique( voteview2rollcall(json) ))
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
print( data )
dat  <- data$votematrix[,grep("^V\\d+", names(data$votematrix))]
rnames <- sprintf("%s %s - %s", trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
rownames(dat) <- rnames
legis.data <- data$votematrix[, -grep("^V\\d+", names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data = dat,
yea = c(1, 2, 3),
nay = c(4, 5, 6),
missing = c(NA, 7, 8, 9),
notInLegis = 0,
legis.data = legis.data,
vote.data = data$rollcalls,
source = "Download from VoteView")
return(rc)
}
voteview2rollcall(json)
# Take the JSON from voteview and translate it in to a PSCL rollcall object
voteview2rollcall <- function(json) {
data <- read.voteview.json(json)
print( data )
return(data$votematrix$icpsr)
dat  <- data$votematrix[,grep("^V\\d+", names(data$votematrix))]
rnames <- sprintf("%s %s - %s", trim(data$votematrix$name),
data$votematrix$cqlabel,
data$votematrix$icpsr)
rownames(dat) <- rnames
legis.data <- data$votematrix[, -grep("^V\\d+", names(data$votematrix))]
rownames(legis.data) <- rnames
rc <- rollcall(data = dat,
yea = c(1, 2, 3),
nay = c(4, 5, 6),
missing = c(NA, 7, 8, 9),
notInLegis = 0,
legis.data = legis.data,
vote.data = data$rollcalls,
source = "Download from VoteView")
return(rc)
}
voteview2rollcall(json)
res <- voteview2rollcall(json)
length(res)
length(unique(res))
res
json
data <- fromJSON(json)
data$vmNames
data$rcNames
data
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2005-01-01")
res
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2005-01-01", enddate= "2005-02-07")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
data
length(data$votematrix$icpsr)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2005-01-01")
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
data$votematrix
names(data$votematrix)
data$votematrix$district
data$votematrix$name
data$votematrix$icpsr
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
duplicated(data$votematrix$icpsr)
data$votematrix$icpsr[duplicated(data$votematrix$icpsr)]
data$votematrix$icpsr == "40105"
data$votematrix[data$votematrix$icpsr == "40105"]
data$votematrix$district[data$votematrix$icpsr == "40105"]
data$votematrix$name[data$votematrix$icpsr == "40105"]
res <- voteview.search("Iraq", chamber = "Senate", enddate = "2006-01-01")
res <- voteview.search("Iraq", chamber = "Senate", enddate = "2006-01-01")
res <- voteview.search("Iraq", chamber = "Senate", enddate = "2007-01-01")
res <- voteview.search("Iraq", chamber = "Senate", enddate = "2007-01-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2008-01-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2010-01-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2009-01-01")
res <- voteview.search("Iraq", chamber = "Senate", enddate = "2009-01-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2009-01-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2009-11-01")
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2009-10-01")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2008-10-01")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2007-10-01")
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2005-10-01")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2004-10-01")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2003-10-01")
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "1900-10-01")
res
json <- voteview.download(res$id)
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq", chamber = "Senate", startdate = "2009-10-01")
res
json <- voteview.download(res$id)
voteview.download <- function(ids) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/download?ids=%s&xls=F",
paste(ids , collapse = ","))
return(theurl)
conn <- url(theurl)
suppressWarnings(resjson <- readLines(conn))
close(conn)
return( resjson )
}
voteview.download(res$id)
res <- voteview.search("Iraq", chamber = "Senate")
voteview.download(res$id)
res
voteview.download(c("S1120211", "S1130507"))
voteview.download <- function(ids) {
theurl <- sprintf("http://leela.sscnet.ucla.edu/voteview/download?ids=%s&xls=F",
paste(ids , collapse = ","))
conn <- url(theurl)
suppressWarnings(resjson <- readLines(conn))
close(conn)
return( resjson )
}
json <- voteview.download(c("S1120211", "S1130507"))
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
res <- voteview.search("Iraq")
res
json <- voteview.download(c("H1131090", "H1140369"))
data <- fromJSON(json)
length(unique(data$votematrix$icpsr))
length(data$votematrix$icpsr)
json <- voteview.download(c("S1110326","S1120211"))
data <- fromJSON(json)
length(unique(data$votematrix$icpsr)) == length(data$votematrix$icpsr)
res <- voteview.search("Iraq")
res
res[314,]
res <- voteview.search("abortion")
res
res[382:383,]
res <- voteview.search("Iraq")
res
res[314,]
library(Rvoteview)
setwd("~/Dropbox/voteview/voteviewUCLA/")
devtools::document()
devtools::install()
setwd("~/Dropbox/voteview/voteviewUCLA/")
devtools::document()
res <- voteview.search("University")
json <- voteview.download(res$id)
res <- voteview.search("Iraq")
json <- voteview.download(res$id)
rc <- voteview2rollcall(json)
res <- voteview.search("Iraq", startdate="2005-01-01")
json <- voteview.download(res$id)
rc <- voteview2rollcall(json)
res
res <- voteview.search("University")
json <- voteview.download(res[res$session %in% 50:99, ]$id) #fails
json <- voteview.download(res[res$session %in% 50:80, ]$id) #passes
json <- voteview.download(res[res$session %in% 81:99, ]$id) #passes
library(Rvoteview)
res <- voteview.search("Iraq", startdate="2005-01-01")
library(Rvoteview)
res <- voteview.search("Iraq", startdate="2005-01-01")
ids < res[res$session < 113]$id
ids < res[res$session < 113]$id
ids <- res[res$session < 113]$id
ids <- res[res$session < 113, ]$id
system.time(voteview.download(ids))
